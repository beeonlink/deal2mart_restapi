"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.templateUtils = exports.loadTemplate = exports.createDocOrThrow = exports.isInTemplatesDir = exports.loadFromCliParamOrApiDocProject = exports.loadFileOrThrowIfNotExist = exports.pathExists = exports.unique = exports.mkdirp = exports.DEFAULT_TEMPLATE_PATH = exports.TEMPLATES_PATH = void 0;
const ejs_1 = __importDefault(require("ejs"));
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const apidoc_light_1 = require("apidoc-light");
exports.TEMPLATES_PATH = path_1.default.resolve(__dirname, '..', 'templates');
exports.DEFAULT_TEMPLATE_PATH = path_1.default.resolve(exports.TEMPLATES_PATH, 'default.md');
/**
 * Recursively create an arborescence to the given path
 *
 * @param p Path to follow
 */
const mkdirp = (p) => promises_1.default.mkdir(p, { recursive: true });
exports.mkdirp = mkdirp;
/**
 * Make array values unique
 *
 * @param arr Source array of strings
 */
const unique = (arr) => [...new Set(arr)];
exports.unique = unique;
/**
 * Check a path exists on the file system
 *
 * @param p Path to check existance from
 * @throws Path does not exist
 */
const pathExists = (p, logIfFail = true) => promises_1.default
    .access(p)
    .then(() => true)
    .catch(err => (logIfFail && console.error(err), false));
exports.pathExists = pathExists;
const loadFileOrThrowIfNotExist = async (optionName, filePath) => {
    if (!(await (0, exports.pathExists)(filePath)))
        throw new Error(`The \`${optionName}\` path does not exist or is not readable. Path: ${filePath}`);
    return await promises_1.default.readFile(filePath, { encoding: 'utf-8' });
};
exports.loadFileOrThrowIfNotExist = loadFileOrThrowIfNotExist;
/**
 * Try to load file from CLI parameter or from `api_project.json`
 * @param optionName CLI parameter/`api_project.json` key name
 * @param cliParam Received CLI param value
 * @param apiDocProjectData `api_project.json` content
 * @returns
 */
const loadFromCliParamOrApiDocProject = async (optionName, cliParam, apiDocProjectData) => {
    if (cliParam)
        return await (0, exports.loadFileOrThrowIfNotExist)(`cli.${optionName}`, cliParam);
    else if (apiDocProjectData[optionName]) {
        if (apiDocProjectData[optionName].filename)
            // This is not a valid option as apiDoc will convert input `filename` to actual markdown content
            // But let's support it anyway.
            return await (0, exports.loadFileOrThrowIfNotExist)(`apidoc_project_file.${optionName}.filename`, apiDocProjectData[optionName].filename);
        else if (apiDocProjectData[optionName].content)
            return `${apiDocProjectData[optionName].title ? `# ${apiDocProjectData[optionName].title}\n\n` : ''}${apiDocProjectData[optionName].content}`;
    }
};
exports.loadFromCliParamOrApiDocProject = loadFromCliParamOrApiDocProject;
/**
 * Check if a template is in the templates directory
 * @param name template name (without the `.md` file extension)
 */
const isInTemplatesDir = (name) => promises_1.default.readdir(exports.TEMPLATES_PATH).then(files => files.includes(`${name}.md`));
exports.isInTemplatesDir = isInTemplatesDir;
/**
 * Invoke apidoc to get the documentation
 * @param input Input source files path
 * @throws apiDoc parsing error
 */
const createDocOrThrow = (options) => {
    const doc = (0, apidoc_light_1.createDoc)({ ...options, src: options.input });
    return {
        apiDocProjectData: doc.project,
        apiDocApiData: Object.values(doc.data).filter(x => x.type)
    };
};
exports.createDocOrThrow = createDocOrThrow;
/**
 * Load the template and compile it with EJS
 * @param template template path, name or raw plain text
 * @param logIfFileNotFound turn off logging
 */
const loadTemplate = async (template, logIfFileNotFound = true) => {
    if (template) {
        // Raw EJS plain text template
        if (template.includes('<%'))
            logIfFileNotFound = false;
        // Template name
        else if (await (0, exports.isInTemplatesDir)(template))
            template = await promises_1.default.readFile(path_1.default.resolve(exports.TEMPLATES_PATH, `${template}.md`), 'utf-8');
        // Path to template file
        else if (await (0, exports.pathExists)(template, logIfFileNotFound))
            template = await promises_1.default.readFile(template, 'utf-8');
    }
    // Default template
    else
        template = await promises_1.default.readFile(exports.DEFAULT_TEMPLATE_PATH, 'utf-8');
    return ejs_1.default.compile(template, { async: true });
};
exports.loadTemplate = loadTemplate;
/** Utility functions passed to the EJS template */
exports.templateUtils = {
    /**
     * Convert a title to a Markdown-valid relative link
     * @param str Title to convert
     * @returns The valid linkable string
     */
    toLink: (str) => str.replace(/\s+/g, '-')
};
